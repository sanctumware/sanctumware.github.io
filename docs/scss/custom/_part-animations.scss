// Set file variable
$filename: 'scss/custom/_part-animations.scss';

/*==============================================================================
  @Keyframes - #{$filename}
==============================================================================*/

@include keyframes('fadeIn') {
  0%   {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@include keyframes('slideInUp') {
  0% {
    @include transform(translate3d(0, 50%, 0));
    visibility: visible;
  }
  100% {
    @include transform(translate3d(0, 0, 0));
  }
}

@include keyframes('slideInRight') {
  0% {
    @include transform(translate3d(50%, 0, 0));
    visibility: visible;
  }
  100% {
    @include transform(translate3d(0, 0, 0));
  }
}

@include keyframes('slideInDown') {
  0% {
    @include transform(translate3d(0, -50%, 0));
    visibility: visible;
  }
  100% {
    @include transform(translate3d(0, 0, 0));
  }
}

@include keyframes('slideInLeft') {
  0% {
    @include transform(translate3d(-50%, 0, 0));
    visibility: visible;
  }
  100% {
    @include transform(translate3d(0, 0, 0));
  }
}

/*==============================================================================
  @Animations - #{$filename}
==============================================================================*/

/**
 * Global Animation Settings
 */
.scene {
  .header,
  .main,
  .home-header,
  .home-main {
    @include animation-duration(0.25s);
    @include animation-timing-function(ease-out);
    @include animation-fill-mode(both);
  }
}

/**
 * Specific Animations
 */
.scene {
  .header,
  .home-header {
    @include animation-name(fadeIn);
  }
  .main,
  .home-main {
    @include animation-name(fadeIn, slideInUp);
  }
}

@include media-min(720px) {
  
  .scene {
    .main {
      @include animation-name(fadeIn, slideInRight);
    }
  }
  
}

/**
 * Exiting Animations
 */
.scene.is-exiting {
  .header,
  .main,
  .home-header,
  .home-main {
    @include animation-direction(alternate-reverse);
  }
}

// 1. [animation-name]            : (animation name)
// 2. [animation-duration]        : (seconds, milliseconds)
// 3. [animation-timing-function] : (linear, ease, ease-in, ease-out, ease-in-out)
// 4. [animation-delay]           : (seconds, milliseconds)
// 5. [animation-iteration-count] : (number, infinite)
// 6. [animation-direction]       : (normal, reverse, alternate, alternate-reverse)
// 7. [animation-fill-mode]       : (none, forwards, backwards, both, initial, inherit)
// 8. [animation-play-state]      : (running, paused)

// @include animation(example 10s linear 1s infinite normal);
// @param $animation
//   @type animation value ([animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction] [animation-fill-mode] [animation-play-state])

// @include animation-name( $name... )
// @param $name
//   @type animation name

// @include animation-duration( $duration... )
// @param $duration
//   @type time value (seconds, milliseconds)

// @include animation-timing-function( $timing-function... )
// @param $timing-function
//   @type timing function (linear, ease, ease-in, ease-out, ease-in-out)

// @include animation-delay( $delay... )
// @param $delay
//   @type time value (seconds, milliseconds)

// @include animation-iteration-count( $iteration-count... )
// @param $iteration-count
//   @type unit (number, infinite)

// @include animation-direction( $direction... )
// @param $direction
//   @type direction (normal, reverse, alternate, alternate-reverse)

// @include animation-fill-mode( $fill-mode... )
// @param $fill-mode
//   @type fill mode (none, forwards, backwards, both, initial, inherit)

// @include animation-play-stay( $play-stay... )
// @param $play-state
//   @type play state (running, paused)
