<h1>Functions</h1>
<p>This is where we define custom functions for our framework. These functions are global and don't apply specifically to a single element/block component.</p>

<section class="subsection subsection-functions">
<ul class="docs-list">
  
  <li>
    <h2>map-extend</h2>
    <p>jQuery-style extend function for when `map-merge()` is not enough. Use when you need to merge more than two mixins and/or need our merge to be recursive.</p>
    <pre class="language-scss"><code>@function map-extend( $map, $maps..., $deep )
// @param $map
//   @type first map
// @param $maps
//   @type list of maps
// @param $deep
//   @type boolean
//   @desc Whether or not to enable recursive mode.
// @return merged map value</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>
$grid-configuration-default: (
  'columns': 12,
  'layouts': (
    'small': 800px,
    'medium': 1000px,
    'large': 1200px,
  ),
);

$grid-configuration-custom: (
  'layouts': (
    'large': 1300px,
    'huge': 1500px
  ),
);

$grid-configuration-user: (
  'direction': 'ltr',
  'columns': 16,
  'layouts': (
    'large': 1300px,
    'huge': 1500px
  ),
);

// Not deep
$grid-configuration: map-extend($grid-configuration-default, $grid-configuration-custom, $grid-configuration-user);
// -> ("columns": 16, "layouts": (("large": 1300px, "huge": 1500px)), "direction": "ltr")
 
// Deep
$grid-configuration: map-extend($grid-configuration-default, $grid-configuration-custom, $grid-configuration-user, true);
// -> ("columns": 16, "layouts": (("small": 800px, "medium": 1000px, "large": 1300px, "huge": 1500px)), "direction": "ltr")
</code></pre>
  </li>
  
  <li>
    <h2>map-fetch</h2>
    <p>An easy way to fetch a value in a multi-level map. Works much like <code>map-get()</code> except that you pass multiple keys as the second variable argument to go down multiple levels in the nested map.</p>
    <pre class="language-scss"><code>@function map-fetch( $map, $keys... )
// @param $map
//   @type map
// @param $keys
//   @type list
// @return map value</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>
$grid-configuration: (
  'columns': 12,
  'layouts': (
    'small': 800px,
    'medium': 1000px,
    'large': 1200px,
  ),
);

// Without `map-fetch`
$medium: map-get(map-get($grid-configuration, 'layouts'), 'medium');

// With `map-fetch`
$medium: map-fetch($grid-configuration, 'layouts', 'medium');
</code></pre>
  </li>
  
  <li>
    <h2>map-set</h2>
    <p>An easy to to set a deep value in a multi-level map. This by passing in a map, value and keys to the original map value you want changed.</p>
    <pre class="language-scss"><code>@function map-set( $map, $value, $keys... )
// @param $map
//   @type map
// @param $value
//   @type value
// @param $keys
//   @type list
// @return updated map value</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>
$grid-configuration: (
  'columns': 12,
  'layouts': (
    'small': 800px,
    'medium': 1000px,
    'large': 1200px,
  ),
);
 
// Without `map-set`
$grid-configuration: map-merge($grid-configuration, map-merge(map-get($grid-configuration, 'layouts'), ('large': 1300px)));
 
// With `map-set`
$medium: map-set($grid-configuration, 1300px, 'layouts' 'medium');
</code></pre>
  </li>
  
  <li>
    <h2>strip-units</h2>
    <p>Strips the unit from a value. For example, if you pass it 12px, it will strip off the px unit and return the number 12.</p>
    <pre class="language-scss"><code>@function strip-units( $val )
// @param $val
//   @type unit (pixel, em, percent, number)
// @return number</code></pre>
  </li>

  <li>
    <h2>px-to-em</h2>
    <p>Converts a pixel value to ems. By default it'll use the base font size, but can be passed a custom base font size.</p>
    <pre class="language-scss"><code>@function px-to-em( $px, $base )
// @param $px
//   @type unit (pixel, number)
// @param $base-font-size
//   @type unit (pixel, number)
//   @default $base-font-size
// @return unit (em)</code></pre>
  </li>
  
    <li>
    <h2>px-to-rem</h2>
    <p>Converts a pixel value to rems. Rem units use the base font size set on the <code>&lt;html&gt;</code> element which BaseWeb uses <code>$base-font-size</code> to set.</p>
    <pre class="language-scss"><code>@function px-to-rem( $px )
// @param $px
//   @type unit (pixel, number)
// @return unit (rem)</code></pre>
  </li>

  <li>
    <h2>em-to-px</h2>
    <p>Converts an em value to pixels. By default it'll use the base font size, but can be passed a custom base font size.</p>
    <pre class="language-scss"><code>@function em-to-px( $em, $base )
// @param $px
//   @type unit (em, number)
// @param $base-font-size
//   @type unit (pixel, number)
//   @default $base-font-size
// @return unit (px)</code></pre>
  </li>

</ul>
</section>
