<h1>Mixins</h1>
<p>Global mixins for our framework. These mixins are global and don't apply specifically to a single element/block component.</p>

<section class="subsection subsection-mixins">
<ul class="docs-list">
  
  <li>
    <h2>clearfix</h2>
    <p>Allows you to clear an element that contains floats.</p>
    <pre class="language-scss"><code>@mixin clearfix()</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.wrapper {
  @include clearfix();
}

// CSS Output
.wrapper:after {
  content: '';
  display: table;
  clear: both;
}</code></pre>
  </li>
  
  <li>
    <h2>remove-clearfix</h2>
    <p>Removes the clearfix styles from an element. This is typically used when a clearfix is inherited on an element and you'd like it removed.</p>
    <pre class="language-scss"><code>@mixin remove-clearfix()</code></pre>
  </li>
  
  <li>
    <h2>float-modifiers</h2>
    <p>Adds the float modifier classes to an element.</p>
    <pre class="language-scss"><code>@mixin float-modifiers( $left, $right )
// @param $left
//   @type class name
//   @default $class-float-left
// @param $right
//   @type class name
//   @default $class-float-right</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.button-group-wrapper .button-group {
  float: left;
  @include float-modifiers();
}

// CSS Output
.button-group-wrapper .button-group {
  float: left;
}
.button-group-wrapper .button-group.float-left {
  float: left;
}
.button-group-wrapper .button-group.float-right {
  float: right;
}
</code></pre>
  </li>
  
  <li>
    <h2>size</h2>
    <p>Shorthand for adding width and height dimensions to an element. If you only pass in a width, the height will be set to equal the width and create a square. If either the width or height are unit-less, it defaults to pixels.</p>
    <pre class="language-scss"><code>@mixin size( $height, $width )
// @param $width
//   @type unit (number, pixel, percentage)
// @param $height
//   @type unit (number, pixel, percentage, false)
//   @default false -> $width</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.my-special-box {
  @include size(100px, 50px);
  ...
}

// CSS Output
.my-special-box {
  width: 100px;
  height: 50px;
  ...
}
</code></pre>
    <div class="demo">
      <div class="my-special-box"></div>
    </div>
  </li>

  <li>
    <h2>vertical-center</h2>
    <p>Centers an element vertically within it's parent. Parent element may need to have transform-style set to `preserve-3d` to prevent half pixel bluring.</p>
    <pre class="language-scss"><code>@mixin vertical-center()</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.vertical-center {
  @include vertical-center();
}

// CSS Output
.vertical-center {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}</code></pre>

    <div class="demo demo-vertical-center">
      <div class="vertical-center"></div>
    </div>
  </li>
  
  <li>
    <h2>scrollable</h2>
    <p>Makes touch devices use momentum-based scrolling for the given element.</p>
    <pre class="language-scss"><code>@mixin scrollable()</code></pre>
  </li>
  
  <li>
    <h2>box-sizing</h2>
    <p>The box-sizing CSS property is used to alter the default CSS box model used to calculate widths and heights of elements.</p>
    <pre class="language-scss"><code>@mixin box-sizing( $box-sizing )
// @param $box-sizing
//   @type box-sizing value (content-box, padding-box, border-box, inherit)
//   @default $box-sizing</code></pre>
  </li>
  
  <li>
    <h2>box-shadow</h2>
    <p>The box-shadow CSS property describes one or more shadow effects as a comma-separated list.</p>
    <pre class="language-scss"><code>@mixin box-shadow( $shadow... )
// @param $shadow
//   @type box-shadow value ([horizontal offset] [vertical offset] [blur radius] [spread radius] [color])
//   @default $box-shadow</code></pre>
  </li>
  
  <li>
    <h2>border-radius</h2>
    <p>Define border radius using mixin shorthand and global defaults.</p>
    <pre class="language-scss"><code>@mixin border-radius( $radius )
// @param $radius
//   @type unit (pixel, percent)</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.box-1 {
  @include border-radius();
}
.box-2 {
  @include border-radius-left(20px);
}
.box-3 {
  @include border-radius-top(50%);
}

// CSS Output
.box-1 {
  border-radius: 3px;
}
.box-2 {
  border-top-left-radius: 20px;
  border-bottom-left-radius: 20px;
}
.box-3 {
  border-top-left-radius: 50%;
  border-top-right-radius: 50%;
}</code></pre>
    <h3>Available Mixins</h3>
    <ul class="docs-list-compact">
      <li><code>border-radius()</code> <span class="right demo-border-radius mixin-border-radius"></span></li>
      <li><code>border-radius-top()</code> <span class="right demo-border-radius mixin-border-radius-top"></span></li>
      <li><code>border-radius-top-left()</code> <span class="right demo-border-radius mixin-border-radius-top-left"></span></li>
      <li><code>border-radius-top-right()</code> <span class="right demo-border-radius mixin-border-radius-top-right"></span></li>
      <li><code>border-radius-bottom()</code> <span class="right demo-border-radius mixin-border-radius-bottom"></span></li>
      <li><code>border-radius-bottom-left()</code> <span class="right demo-border-radius mixin-border-radius-bottom-left"></span></li>
      <li><code>border-radius-bottom-right()</code> <span class="right demo-border-radius mixin-border-radius-bottom-right"></span></li>
      <li><code>border-radius-left()</code> <span class="right demo-border-radius mixin-border-radius-left"></span></li>
      <li><code>border-radius-left-top()</code> <span class="right demo-border-radius mixin-border-radius-left-top"></span></li>
      <li><code>border-radius-left-bottom()</code> <span class="right demo-border-radius mixin-border-radius-left-bottom"></span></li>
      <li><code>border-radius-right()</code> <span class="right demo-border-radius mixin-border-radius-right"></span></li>
      <li><code>border-radius-right-top()</code> <span class="right demo-border-radius mixin-border-radius-right-top"></span></li>
      <li><code>border-radius-right-bottom()</code> <span class="right demo-border-radius mixin-border-radius-right-bottom"></span></li>
    </ul>
    <div class="notice warning">
      <p>For the list above of available mixins, I'm passing in a border-radius of <code>50%</code> so the effect is more obvious.</p>
    </div>
  </li>
  
  <li>
    <h2>transform</h2>
    <p>The CSS transform property lets you modify the coordinate space of the CSS visual formatting model.</p>
    <pre class="language-scss"><code>@mixin transform( $function... )
// @param $function
//   @type transform-function ([matrix] [perspective] [rotate] [scale] [skew] [translate])</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.demo-transform-skew {
  ...
  @include transform(skew(30deg, 10deg));
}

// CSS Output
.demo-transform-skew {
  ...
  -webkit-transform: skew(30deg, 10deg);
  -ms-transform: skew(30deg, 10deg);
  transform: skew(30deg, 10deg);
}</code></pre>
    <div class="demo">
      <div class="demo-example demo-transform-skew"></div>
    </div>
    <div class="notice info">
      <p>For a full list of transform functions, checkout the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function">CSS documentation at MDN</a>.</p>
    </div>
    
  </li>
  
  <li>
    <h2>transform-style</h2>
    <p>The transform-style CSS property determines if the children of the element are positioned in the 3D-space or are flattened in the plane of the element.</p>
    <pre class="language-scss"><code>@mixin transform-style( $style... )
// @param $style
//   @type transform style (flat, preserve-3d, inherit)</code></pre>
  </li>
  
  <li>
    <h2>rotate</h2>
    <p>Adds transform rotate styles using a degree and the transform mixin.</p>
    <pre class="language-scss"><code>@mixin rotate( $deg )
// @dependency mixin transform()
// @param $deg
//   @type unit (degree)</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.demo-rotate {
  @include rotate(45deg);
}

// CSS Output
.demo-rotate {
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
}</code></pre>
    <div class="demo">
      <div class="demo-example demo-rotate"></div>
    </div>
  </li>
  
  <li>
    <h2>transition</h2>
    <p>The CSS transition property is a shorthand property for transition-property, transition-duration, transition-timing-function, and transition-delay. It allows to define the transition between two states of an element. Different states may be defined using pseudo-classes like :hover or :active or dynamically set using JavaScript.</p>
    <pre class="language-scss"><code>@mixin transition( $transition... )
// @param $transition
//   @type transition value ([transition-property] [transition-duration] [transition-timing-function] [transition-delay])
//   @default $transition</code></pre>
    
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.demo-transition {
  background-color: $blue-green-darker;
  @include transition();
}
.demo-transition:hover {
  background-color: $red-violet;
}

// CSS Output
.demo-transition {
  background-color: #3da96d;
  -webkit-transition: all 0.25s linear;
  transition: all 0.25s linear;
}
.demo-transition:hover {
  background-color: #d25992;
}</code></pre>
    <div class="demo">
      <div class="demo-example demo-transition"></div>
    </div>
    <h3>Available Mixins</h3>
    <p>You can also set transition properties separately using the transition property, duration, timing-function and delay mixins.</p>
    <pre class="language-scss"><code>@mixin transition-property( $transition-property )
// @param $transition-property
//   @type property name
//   @default $transition-property

@mixin transition-duration( $transition-duration )
// @param $transition-duration
//   @type time value (seconds, milliseconds)
//   @default $transition-duration

@mixin transition-timing-function( $transition-timing-function )
// @param $transition-timing-function
//   @type timing function (linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end)
//   @default $transition-timing-function

@mixin transition-delay( $transition-delay )
// @param $transition-delay
//   @type time value (seconds, milliseconds)
//   @default $transition-delay</code></pre>
  </li>
  
  <li>
    <h2>keyframes</h2>
    <p>The <code>@keyframes</code> CSS at-rule lets you control the intermediate steps in a CSS animation sequence by establishing keyframes (or waypoints) along the animation sequence that must be reached during the animation.</p>
    <pre class="language-scss"><code>@mixin keyframes( $name )
// @param $name
//   @type animation name
// @param @content (passed in brackets)
//   @type style block</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
@include keyframes('example') {
  0%   { background-color: $red; }
  100% { background-color: $blue; }
}

// CSS Output
@-webkit-keyframes example {
  0% {
    background-color: #de5151;
  }
  100% {
    background-color: #2ab0ea;
  }
}
@keyframes example {
  0% {
    background-color: #de5151;
  }
  100% {
    background-color: #2ab0ea;
  }
}</code></pre>
  </li>
  
  <li>
    <h2>animation</h2>
    <p>The animation CSS property is a shorthand property for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode and animation-play-state.</p>
    <pre class="language-scss"><code>@mixin animation( $animation... )
// @param $animation
//   @type animation value ([animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction] [animation-fill-mode] [animation-play-state])</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.demo-animation {
  ...
  @include animation(example 10s linear 1s infinite normal);
}

// CSS Output
.demo-animation {
  ...
  -webkit-animation: example 10s linear 1s infinite normal;
  animation: example 10s linear 1s infinite normal;
}</code></pre>
    <div class="demo">
      <div class="demo-example demo-animation"></div>
    </div>
    <h3>Available Mixins</h3>
    <p>You can also set animation properties separately using the animation name, duration, timing-function, delay, iteration, direction, fill mode and play stay mixins.</p>
    <pre class="language-scss"><code>@mixin animation-name( $name... )
// @param $name
//   @type animation name

@mixin animation-duration( $duration... )
// @param $duration
//   @type time value (seconds, milliseconds)

@mixin animation-timing-function( $timing-function... )
// @param $timing-function
//   @type timing function (linear, ease, ease-in, ease-out, ease-in-out)

@mixin animation-delay( $delay... )
// @param $delay
//   @type time value (seconds, milliseconds)

@mixin animation-iteration-count( $iteration-count... )
// @param $iteration-count
//   @type unit (number, infinite)

@mixin animation-direction( $direction... )
// @param $direction
//   @type direction (normal, reverse, alternate, alternate-reverse)

@mixin animation-fill-mode( $fill-mode... )
// @param $fill-mode
//   @type fill mode (none, forwards, backwards, both, initial, inherit)

@mixin animation-play-stay( $play-stay... )
// @param $play-state
//   @type play state (running, paused)</code></pre>
  </li>
  
  <li>
    <h2>linear-gradient</h2>
    <p>Creates an image which represents a linear gradient of colors.</p>
    <pre class="language-scss"><code>@mixin linear-gradient( $gradient... )
// @param $gradient
//   @type gradient ([side-or-corner] [angle] [color-stop])</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.demo-linear-gradient {
  @include linear-gradient(left, $green, $blue, $violet);
}

// CSS Output
.demo-linear-gradient {
  background-image: -webkit-linear-gradient(left, #8ecb25, #2ab0ea, #bc6bd3);
  background-image: -moz-linear-gradient(left, #8ecb25, #2ab0ea, #bc6bd3);
  background-image: -ms-linear-gradient(left, #8ecb25, #2ab0ea, #bc6bd3);
  background-image: linear-gradient(left, #8ecb25, #2ab0ea, #bc6bd3);
}</code></pre>
    <div class="demo">
      <div class="demo-example demo-linear-gradient"></div>
    </div>
  </li>
  
  <li>
    <h2>radial-gradient</h2>
    <p>Creates an image which represents a gradient of colors radiating from an origin, the center of the gradient.</p>
    <pre class="language-scss"><code>@mixin radial-gradient( $gradient... )
// @param $gradient
//   @type gradient ([position] [shape] [size] [color-stop] [color-stop] [extent-keyword])</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.demo-radial-gradient {
  @include radial-gradient(circle, $violet, $violet-darker);
}

// CSS Output
.demo-radial-gradient {
  background-image: -webkit-radial-gradient(circle, #bc6bd3, #aa44c7);
  background-image: -moz-radial-gradient(circle, #bc6bd3, #aa44c7);
  background-image: -ms-radial-gradient(circle, #bc6bd3, #aa44c7);
  background-image: radial-gradient(circle, #bc6bd3, #aa44c7);
}</code></pre>
    <div class="demo">
      <div class="demo-example demo-radial-gradient"></div>
    </div>
  </li>
  
  <li>
    <h2>font-weight</h2>
    <p>Output the font weight using the weight key to output the number weight.</p>
    <pre class="language-scss"><code>@mixin font-weight( $weight )
// @param $weight
//   @type font-weight keyword (thing, hairline, light, regular, medium, semi-bold, bold, extra-bold, black)</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
h1 {
  @include font-weight('light');
}

//CSS
h1 {
  font-weight: 300;
}</code></pre>
  </li>
  
  <li>
    <h2>text-truncate</h2>
    <p>Truncates text with an ellipsis. Element this is applied to must be block or inline-block.</p>
    <pre class="language-scss"><code>@mixin text-truncate()
// @param $display
//   @type display property (block, inline-block)
//   @default block</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.demo-text-truncate {
  @include text-truncate();
}

// CSS Output
.demo-text-truncate {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}</code></pre>
    <div class="demo">
      <div class="demo-text-truncate">This is some text that will get truncated</div>
    </div>
  </li>

  <li>
    <h2>reverse-index</h2>
    <p>Sets the index of a set of elements to stack in reverse order.</p>
    <pre class="language-scss"><code>@mixin reverse-index( $items )
// @param $items
//   @type number
//   @desc The number of elements in the set.</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>
ul.example-reverse-index li {
  @include reverse-index( 3 );
}
</code></pre>
<pre class="language-css"><code>
ul.example-reverse-index li:nth-child(1) {
  z-index: 1;
}
ul.example-reverse-index li:nth-child(2) {
  z-index: 2;
}
ul.example-reverse-index li:nth-child(3) {
  z-index: 3;
}
</code></pre>
  </li>
  
  <li>
    <h2>text-hide</h2>
    <p>Hides text from an element. This is most commonly used as an image replacement technique for hiding text in an element to reveal a background image.</p>
    <pre class="language-scss"><code>@mixin text-hide()</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.demo-logo-image {
  ...
  @include text-hide();
}

// CSS Output
.demo-logo-image {
  ...
  font-size: 0;
  line-height: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}</code></pre>
    <pre class="language-markup"><code>&lt;div class=&quot;demo-logo-image&quot;&gt;Demo Logo Image Replace&lt;/div&gt;</code></pre>
    <div class="demo">
      <div class="demo-logo-image">Demo Logo Image Replace</div>
    </div>
  </li>
  
  <li>
    <h2>make-text-mask</h2>
    <p>Lets you easily create text masks using background-clip.</p>
    <pre class="language-scss"><code>@mixin make-text-mask( $bg-image, $text-color )
// @param $big-image
//   @type background-image property
//   @default null
// @param $text-color
//   @type transparent color
//   @default transparent
// @param @content
//   @type style block
//   @desc use this to set custom background styles (such as gradients).</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
// Applied to a wrapping text element
.demo-text-mask {
  @include make-text-mask(url('../img/demo-mask.jpg'), rgba($black, 0.25));
  
  // Style text, or whatever...
  p {
    ...
  }
}

// CSS Output
.demo-text-mask {
  -webkit-text-fill-color: rgba(0, 0, 0, 0.25);
  -webkit-background-clip: text;
  background-clip: text;
  background-image: url('../img/demo-mask.jpg');
  background-repeat: no-repeat;
  background-position: center center;
  background-size: cover;
}
</code></pre>
    <pre class="language-markup"><code>
&lt;div class=&quot;demo-text-mask&quot;&gt;
  &lt;p&gt;Demo Text Mask&lt;/p&gt;
&lt;/div&gt;
</code></pre>
    <div class="demo">
      <div class="demo-text-mask">
        <p>Demo Text Mask</p>
      </div>
    </div>
  </li>
  
  <li>
    <h2>make-triangle</h2>
    <p>Uses the <code>0*0</code> element with borders trick to draw arrows. The base styles for creating CSS triangles must be applied either through mixin, class or extend.</p>
    <pre class="language-scss"><code>@mixin make-triangle-base()</code></pre>
    <pre class="language-scss"><code>@mixin make-triangle( $size, $color, $direction )
// @param $size
//   @type unit (pixel, em, rem)
// @param $color
//   @type color
// @param $direction
//   @type string ('up', 'right', 'down', 'left', 'up-right', 'up-left', 'down-right', 'down-left')
//   @desc The direction that the triangle will point.</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
%triangle {
  @include make-triangle-base();
}
.example-triangle-1 {
  @extend %triangle;
  @include make-triangle( 14px, $blue-darker, 'left' );
}
.example-triangle-2 {
  @extend %triangle;
  @include make-triangle( 14px, $blue-violet-darker, 'down' );
}
.example-triangle-3 {
  @extend %triangle;
  @include make-triangle( 14px, $violet-darker, 'right' );
}

// CSS Output
.example-triangle-1,
.example-triangle-2,
.example-triangle-3 {
  content: '';
  display: inline-block;
  width: 0;
  height: 0;
  border: 0 none;
  border-style: solid;
  border-color: transparent;
}
.example-triangle-1 {
  border-width: 14px 14px 14px 0;
  border-right-color: #1495cd;
}
.example-triangle-2 {
  border-width: 14px 14px 0 14px;
  border-top-color: #4469da;
}
.example-triangle-3 {
  border-width: 14px 0 14px 14px;
  border-left-color: #aa44c7;
}</code></pre>
    <div class="demo demo-triangle">
      <div class="col col-4"><span class="example-triangle-1"></span></div>
      <div class="col col-4"><span class="example-triangle-2"></span></div>
      <div class="col col-4"><span class="example-triangle-3"></span></div>
    </div>
  </li>
  
</ul>
</section>
