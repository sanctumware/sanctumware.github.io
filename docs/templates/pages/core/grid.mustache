<h1>Grid System</h1>
<p>BaseWeb is built with a very flexible grid system. Out of the box, you can use the default classes and settings to have a basic twelve column flexible grid. The basic things to know when using the base grid system is the markup structure.</p>

<pre class="language-markup"><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-4&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col col-4&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col col-4&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-6&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col col-6&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-12&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="demo-grid">
  <div class="row">
    <div class="col col-4"><p>.col-4</p></div>
    <div class="col col-4"><p>.col-4</p></div>
    <div class="col col-4"><p>.col-4</p></div>
  </div>
  <div class="row">
    <div class="col col-6"><p>.col-6</p></div>
    <div class="col col-6"><p>.col-6</p></div>
  </div>
  <div class="row">
    <div class="col col-12"><p>.col-12</p></div>
  </div>
</div>

<p>The class based grid system is generated using: <code>build-grid-system()</code>. By default it's going to generate all the classes for the container, row and columns based on the grid variables. You can also pass in a map to override any default grid map settings based on different media breakpoints.</p>
  
<p>You can also set the grid type by passing a non-map parameter <code>build-grid-system(mobile)</code> which will make columns staked at 100% width.</p>

<pre class="language-scss"><code>@include build-grid-system(mobile);

@include media-min('medium') {
  @include build-grid-system(('total-width': 740px));
}

@include media-min('large') {
  @include build-grid-system(('total-width': 960px));
}</code></pre>

<h2>Semantic Grids</h2>

<p>The BaseWeb grid system also supports the use of semantic grids. That means you can define a grid without having to use grid classes and instead use mixins to define grid elements directly in your stylesheets.</p>

<pre class="language-scss"><code>.wrapper {
  @include make-container();
  
  .content {
    @include make-row();
    
    .aside {
      @include make-column(4);
    }
    .article {
      @include make-column(8);
    }
  }
}</code></pre>

<p>There are also a set of functions that you can use for setting column and spacing widths. These can be used along with <code>make-column-base()</code> to define multiple columns and set the widths separately to reduce our CSS output.</p>

<pre class="language-scss"><code>.wrapper {
  @include make-container();
  
  .content {
    @include make-row();
    
    .aside,
    .article {
      @include make-column-base();
    }
    .aside {
      width: column-width(4);
    }
    .article {
      width: column-width(8);
    }
  }
}</code></pre>

<div class="demo-grid demo-grid-semantic">
  <div class="demo-wrapper">
    <div class="demo-content">
      <div class="demo-aside"></div>
      <div class="demo-article"></div>
    </div>
  </div>
</div>

<h2>Prefix and Suffix</h2>

<p>You can also create spacing on columns using the prefix and suffix modifiers. These classes are used by adding the prefix and suffix class with the appropriate amount of column spacing you want to be added before or after a column.</p>

<pre class="language-markup"><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-4 suffix-3&quot;&gt;...&lt;/div&gt;
    &lt;div class=&quot;col col-3 prefix-2&quot;&gt;...&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-5 prefix-4 suffix-3&quot;&gt;...&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>

<p>The semantic grid system equivalent would use the <code>add-prefix()</code> and <code>add-suffix</code> mixins.</p>

<pre class="language-scss"><code>.aside {
  @include make-column(4);
  @include add-suffix(3);
}
.article {
  @include make-column(3);
  @include add-prefix(2);
}
.section {
  @include make-column(5);
  @include add-prefix(4);
  @include add-suffix(3);
}</code></pre>

<div class="demo-grid">
  <div class="row">
    <div class="col col-4 suffix-3"><p>.suffix-3</p></div>
    <div class="col col-3 prefix-2"><p>.prefix-2</p></div>
  </div>
  <div class="row">
    <div class="col col-5 prefix-4 suffix-3"><p>.prefix-4 .suffix-3</p></div>
  </div>
</div>

<h2>Nested Columns</h2>

<p>You can created nested columns in your grid system by adding a new row element inside a column. It's important to note that the first element inside a row should always be a column. Otherwise, you'll need to either manually remove the gutter margin or use the <code>.col-no-gutter</code> modifier class.</p>

<p>When using a fluid grid (percent based) the sum of columns in a row must equal the total column value <code>$grid('columns')</code>. But when using a fixed grid (pixel based), the sum must equal the column span of it's parent column element. If you want to mix fixed and fluid grids between breakpoints, it's recommended to use the semantic grid method.</p>

<pre class="language-markup"><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-6&quot;&gt;
      ...
      &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col col-6&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-6&quot;&gt;...&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col col-6&quot;&gt;
      ...
      &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>

<div class="demo-grid demo-grid-nested">
  <div class="row">
    <div class="col col-6">
      <p>.col-6</p>
      <div class="row">
        <div class="col col-6"><p>.col-6</p></div>
        <div class="col col-6"><p>.col-6</p></div>
      </div>
    </div>
    <div class="col col-6">
      <p>.col-6</p>
      <div class="row">
        <div class="col col-4"><p>.col-4</p></div>
        <div class="col col-4"><p>.col-4</p></div>
        <div class="col col-4"><p>.col-4</p></div>
      </div>
    </div>
  </div>
</div>

<div class="notice info">
  <p>By default, our grid system uses inner-gutter-width (padding) instead of gutter-width (margins). So we're able to keep absolute gutters with a fluid grid for nested elements. But if you used margin gutters with a fluid grid, gutters would need to be percentage based.</p>
</div>

<h2>Mini Grid System</h2>

<p>The Mini Grid System works independently of the core Grid System. It's output using the <code>build-mini-grid-system()</code> mixin and takes the <code>$mini-grid</code> map as a parameter to customize the classes it outputs.</p>

<h3>.has-#</h3>

<p>The <code>.has-#</code> class is applied to the parent element where <code>#</code> represents the number of children it wraps. The parent receives a clearfix and all children are given equal widths to span their container.</p>

<pre class="language-markup"><code>
&lt;div class=&quot;has-3&quot;&gt;
  ...
&lt;/div&gt;
&lt;div class=&quot;has-6&quot;&gt;
  ...
&lt;/div&gt;
&lt;div class=&quot;has-9&quot;&gt;
  ...
&lt;/div&gt;
</code></pre>

<div class="demo demo-mini-grid">
  <div class="mini-grid has-3">
    <span>1</span>
    <span>2</span>
    <span>3</span>
  </div>
  <div class="mini-grid has-6">
    <span>1</span>
    <span>2</span>
    <span>3</span>
    <span>4</span>
    <span>5</span>
    <span>6</span>
  </div>
  <div class="mini-grid has-9">
    <span>1</span>
    <span>2</span>
    <span>3</span>
    <span>4</span>
    <span>5</span>
    <span>6</span>
    <span>7</span>
    <span>8</span>
    <span>9</span>
  </div>
</div>

<h3>.is-1-of-#</h3>

<p>The <code>.is-1-of-#</code> class is applied as a child element to represent a fraction of its parent container. Just keep in mind that <code>.is-1-of-#</code> elements get floated so its parent should receive a clearfix..</p>

<pre class="language-markup"><code>
&lt;div&gt;
  &lt;span class=&quot;is-1-of-3&quot;&gt;1/3&lt;/span&gt;
  ...
&lt;/div&gt;

&lt;div&gt;
  &lt;span class=&quot;is-1-of-3&quot;&gt;1/3&lt;/span&gt;
  &lt;span class=&quot;is-1-of-9&quot;&gt;1/9&lt;/span&gt;
  &lt;span class=&quot;is-1-of-9&quot;&gt;1/9&lt;/span&gt;
  &lt;span class=&quot;is-1-of-9&quot;&gt;1/9&lt;/span&gt;
  &lt;span class=&quot;is-1-of-3&quot;&gt;1/3&lt;/span&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;span class=&quot;is-1-of-5&quot;&gt;1/5&lt;/span&gt;
  ...
&lt;/div&gt;
</code></pre>

<div class="demo demo-mini-grid">
  <div class="mini-grid">
    <span class="is-1-of-3">1/3</span>
    <span class="is-1-of-3">1/3</span>
    <span class="is-1-of-3">1/3</span>
  </div>
  <div class="mini-grid">
    <span class="is-1-of-3">1/3</span>
    <span class="is-1-of-9">1/9</span>
    <span class="is-1-of-9">1/9</span>
    <span class="is-1-of-9">1/9</span>
    <span class="is-1-of-3">1/3</span>
  </div>
  <div class="mini-grid">
    <span class="is-1-of-5">1/5</span>
    <span class="is-1-of-5">1/5</span>
    <span class="is-1-of-5">1/5</span>
    <span class="is-1-of-5">1/5</span>
    <span class="is-1-of-5">1/5</span>
  </div>
</div>

<section class="subsection subsection-functions has-inner-subsection">
<div class="inner-subsection">
  <h1>Grid Functions</h1>
  <p class="text-lead">These functions are used to calculate specific grid maths such as the width a set number of columns should span. These are used within grid mixins and are often used when defining semantic grid systems.</p>
</div>

<ul class="docs-list">
  
  <li>
    <h2>column-width</h2>
    <p>A function that returns the width of a column span.</p>
    <pre class="language-scss"><code>@function column-width( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column span you want returned.
// @param $options
//   @type map
//   @default $grid map
// @return unit (pixel, percentage)</code></pre>
  </li>
  
  <li>
    <h2>spacing-width</h2>
    <p>A function that returns the spacing of a column span.</p>
    <pre class="language-scss"><code>@function spacing-width( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column spacing you want returned.
// @param $options
//   @type map
//   @default $grid map
// @return unit (pixel, percentage)</code></pre>
  </li>

</ul>
</section>

<section class="subsection subsection-mixins has-inner-subsection">
<div class="inner-subsection">
  <h1>Grid Mixins</h1>
  <p class="text-lead">These mixins are used to output styles that define a grid system's components. Such as grid containers, rows and columns as well as modifier classes like prefix and suffix spacing. They are also used for outputting the class based grid system.</p>
</div>

<ul class="docs-list">
  
  <li>
    <h2>make-container</h2>
    <p>Outputs all the styles needed to make an element a grid container.</p>
    <pre class="language-scss"><code>@mixin make-container( $options: () )
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2>make-row</h2>
    <p>Outputs all the styles needed to make an element a grid row.</p>
    <pre class="language-scss"><code>@mixin make-row( $options: () )
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2>make-column-base</h2>
    <p>Creates the base styles for a column but excludes setting the width.</p>
    <pre class="language-scss"><code>@mixin make-column-base( $options: () )
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2>make-column</h2>
    <p>Creates all the styles for a column and sets its width.</p>
    <pre class="language-scss"><code>@mixin make-column( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column span you want set.
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2>add-prefix</h2>
    <p>Creates the base styles for a column and sets its width.</p>
    <pre class="language-scss"><code>@mixin add-prefix( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column prefix spacing you want set.
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2>add-suffix</h2>
    <p>Creates the base styles for a spacing suffix.</p>
    <pre class="language-scss"><code>@mixin add-suffix( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column suffix spacing you want set.
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2>build-grid-system</h2>
    <p>Outputs all the classes and styles for the class based grid system. You can either pass in a map that overrides the grid map defaults, or a single grid type parameter to trigger normal or mobile grid systems.</p>
    <pre class="language-scss"><code>@mixin build-grid-system( $grid-type | $options: () )
// @param $grid-type | $options
//   @type string | map
//   @default $grid map</code></pre>
    <h3>Example Usage</h3>
    <p>The most basic use of <code>build-grid-system()</code> is to output mobile styles and within a media query output our standard grid system. This is present in your <code>custom/_custom.scss</code> file by default.</p>
    <pre class="language-scss"><code>// Output our mobile grid system classes.
@include build-grid-system(mobile);

// Media query for styles that target tablet sized devices and above.
@include media-min('medium') {
  // Output our standard grid system using all our default settings.
  @include build-grid-system();
}</code></pre>
    <h3>Classes Output</h3>
    <p>These are all the default classes that become available when generating your grid. Keep in mind that class names can be changed using the class name variables in our <code>$grid</code> map.</p>
    <pre class="language-markup"><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-4&quot;&gt;
      ...
    &lt;/div&gt;
    &lt;div class=&quot;col col-8&quot;&gt;
      ...
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-4 suffix-2&quot;&gt;
      ...
    &lt;/div&gt;
    &lt;div class=&quot;col col-4 prefix-2&quot;&gt;
      ...
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
    <div class="demo-grid">
      <div class="row">
        <div class="col col-4"><p>.col-4</p></div>
        <div class="col col-8"><p>.col-8</p></div>
      </div>
      <div class="row">
        <div class="col col-4 suffix-2"><p>.col-4</p></div>
        <div class="col col-4 prefix-2"><p>.col-4</p></div>
      </div>
    </div>
    <div class="notice info">
      <p>You can disabled the output of prefix and suffix classes by setting their class name variables to <code>none</code> in <code>$grid</code> map or passing it directly to the mixin manually.</p>
    </div>
  </li>
  
  <li>
    <h2>build-mini-grid-system</h2>
    <p>Outputs all the classes for a mini-grid system using the <code>$mini-grid</code> map to set default parameters. You can also pass a custom map to customize the output or create multiple mini grid systems.</p>
    <pre class="language-scss"><code>@mixin build-grid-system( $options: () )
// @param $options
//   @type map
//   @default $mini-grid map</code></pre>
    <h3>Example Usage</h3>
    <p>The mini grid system is called in your <code>custom/_custom.scss</code> file by default.</p>
    <pre class="language-scss"><code>@include build-mini-grid-system();</code></pre>
    <pre class="language-markup"><code>&lt;!-- .has-# Classes --&gt;
&lt;div class=&quot;has-4&quot;&gt;
  &lt;span&gt;1&lt;/span&gt;
  &lt;span&gt;2&lt;/span&gt;
  &lt;span&gt;3&lt;/span&gt;
  &lt;span&gt;4&lt;/span&gt;
&lt;/div&gt;

&lt;!-- .is-1-of-# Classes --&gt;
&lt;div&gt;
  &lt;span class=&quot;is-1-of-3&quot;&gt;1/3&lt;/span&gt;
  &lt;span class=&quot;is-1-of-3&quot;&gt;1/3&lt;/span&gt;
  &lt;span class=&quot;is-1-of-3&quot;&gt;1/3&lt;/span&gt;
&lt;/div&gt;
</code></pre>
    <div class="demo demo-mini-grid">
      <div class="mini-grid has-4">
        <span>1</span>
        <span>2</span>
        <span>3</span>
        <span>4</span>
      </div>
      <div class="mini-grid">
        <span class="is-1-of-3">1/3</span>
        <span class="is-1-of-3">1/3</span>
        <span class="is-1-of-3">1/3</span>
      </div>
    </div>
    <div class="notice warning">
      <p>There may be modules who's features are dependent on a mini-grid system being output (such as the button groups module). Make sure that you're outputting one if the modules you use have a mini-grid as a dependency.</p>
    </div>
  </li>
  
</ul>
</section>
