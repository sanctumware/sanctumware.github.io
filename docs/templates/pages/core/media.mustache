<h1>Media Queries</h1>

<p>The core framework mixins that deal with media queries. These break down to three primary mixins for setting minimum width, maximum width and retina display mixins.</p>

<section class="subsection subsection-mixins">
<ul class="docs-list">

  <li>
    <h2>media-min</h2>
    <p>A media query mixin that deifnes a query using min-width. You can pass in the key to the <code>$teakpoints()</code> or <code>$breakpoints()</code> maps to access that value, or pass a value to create your media query.</p>
    <pre class="language-scss"><code>@mixin media-min( $point ) { @content }
// @param $point
//   @type map key | unit (pixel)
// @param @content (passed in brackets)
//   @type style block</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.something {
  width: 100%;
}
@include media-min('medium') {
  .something {
    width: 300px;
  }
}

// CSS Output
.something {
  width: 100%;
}
@media (min-width: 760px) {
  .something {
    width: 300px;
  }
}</code></pre>
  </li>
  
  <li>
    <h2>media-max</h2>
    <p>A media query mixin that deifnes a query using max-width. You can pass in the key to the <code>$teakpoints()</code> or <code>$breakpoints()</code> maps to access that value, or pass a value to create your media query.</p>
    <p>This mixin will shave a pixel off your breakpoint value so that it never overlaps with a breakpoint that might be used in the <code>media-min</code> mixin except when a value is passed directly.</p>
    <pre class="language-scss"><code>@mixin media-max( $point ) { @content }
// @param $point
//   @type map key | unit (pixel)
// @param @content (passed in brackets)
//   @type style block</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.something {
  width: 300px;
}
@include media-max('medium') {
  .something {
    width: 100%;
  }
}

// CSS Output
.something {
  width: 300px;
}
@media (max-width: 759px) {
  .something {
    width: 100%;
  }
}</code></pre>
  </li>
  
  <li>
    <h2>media-retina</h2>
    <p>Media query mixin can be used for setting styles specifically to retina screens. Used when setting higher resolution background images.</p>
    <pre class="language-scss"><code>@mixin media-retina() { @content }
// @param @content (passed in brackets)
//   @type style block</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>// SCSS
.logo {
  background-image: src('logo.png');
}

@include media-retina {
  .logo {
    background-image: src('logo-2x.png');
    background-size: 100px 50px;
  }
}

// CSS Output
.logo {
  background-image: src('logo.png');
}

@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .logo {
    background-image: src('logo-2x.png');
    background-size: 100px 50px;
  }
}</code></pre>
  </li>
  
</ul>
</section>
