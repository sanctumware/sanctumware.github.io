<h1>Buttons</h1>

<p>There are four ways you can markup a button. An anchor, button or input element that has a type set to <code>button</code> or <code>submit</code>. BaseWeb styles buttons the same, regardless of the method you use to mark them up.</p>

<pre class="language-markup"><code>&lt;a class=&quot;button&quot; href=&quot;#&quot; role=&quot;button&quot;&gt;Anchor Button&lt;/a&gt;
&lt;button class=&quot;button&quot; type=&quot;submit&quot;&gt;Button&lt;/button&gt;
&lt;input class=&quot;button&quot; type=&quot;button&quot; value=&quot;Input Button&quot;&gt;
&lt;input class=&quot;button&quot; type=&quot;submit&quot; value=&quot;Input Submit&quot;&gt;</code></pre>

<div class="demo demo-buttons">
  <a class="button" href="#" role="button">Anchor Button</a>
  <button class="button" type="submit">Button</button>
  <input class="button" type="button" value="Input Button">
  <input class="button" type="submit" value="Input Submit">
</div>

<section class="subsection subsection-variables has-inner-subsection">
<div class="inner-subsection">
  <h1>Button Variables</h1>
  <p class="text-lead">Button variables are encompassed within the <code>$buttons</code> map and are used throughout all button mixins to set default values.</p>
  <ul class="docs-list-compact">
    <li>
      <code>$buttons('classes')</code>
      <code class="right value">true</code>
      <span class="block light">Whether or not we should output button classes. Set to <code>false</code> if you want to use the button modifier mixins semantically and/or reduce CSS output.</span>
    </li>
    
    <li>
      <code>$buttons('padding')</code>
      <code class="right value">0.75em 1.5em</code>
    </li>
    <li>
      <code>$buttons('padding-small')</code>
      <code class="right value">0.5em 1.25em</code>
    </li>
    <li>
      <code>$buttons('padding-large')</code>
      <code class="right value">null</code>
    </li>
    
    <li>
      <code>$buttons('font-family')</code>
      <code class="right value">inherit</code>
    </li>
    <li>
      <code>$buttons('font-size')</code>
      <code class="right value">1em</code>
    </li>
    <li>
      <code>$buttons('font-size-small')</code>
      <code class="right value">0.9em</code>
    </li>
    <li>
      <code>$buttons('font-size-large')</code>
      <code class="right value">1.4em</code>
    </li>
    
    <li>
      <code>$buttons('line-height')</code>
      <code class="right value">1.5em</code>
    </li>
    <li>
      <code>$buttons('color')</code>
      <code class="right value">$color-dark</code>
    </li>
    <li>
      <code>$buttons('font-weight')</code>
      <code class="right value">inherit</code>
    </li>
    <li>
      <code>$buttons('text-shadow')</code>
      <code class="right value">none</code>
    </li>
    
    <li>
      <code>$buttons('background')</code>
      <code class="right value">$white</code>
    </li>
    <li>
      <code>$buttons('background-gradient')</code>
      <code class="right value">false</code>
      <span class="block light">Whether or not to use a gradient for button background. If true, the <code>$buttons('background')</code> will be used as the start color and darkened for the end color using the <code>$buttons('background-deg')</code> as a modifier.</span>
    </li>
    <li>
      <code>$buttons('background-deg')</code>
      <code class="right value">5%</code>
      <span class="block light">The degree that the hover background color or gradient end color is modified.</span>
    </li>
    <li>
      <code>$buttons('background-clip')</code>
      <code class="right value">border-box</code>
    </li>
    <li>
      <code>$buttons('box-shadow')</code>
      <code class="right value">inset 0 0 0 rgba($black, 0)</code>
    </li>
    
    <li>
      <code>$buttons('border-width')</code>
      <code class="right value">1px</code>
    </li>
    <li>
      <code>$buttons('border-style')</code>
      <code class="right value">solid</code>
    </li>
    <li>
      <code>$buttons('border-color')</code>
      <code class="right value">rgba($black, 0.15)</code>
    </li>
    <li>
      <code>$buttons('border-radius')</code>
      <code class="right value">$border-radius</code>
    </li>
    
    <li>
      <code>$buttons('transition-property')</code>
      <code class="value">(color, background-color, box-shadow, border-color)</code>
    </li>
    <li>
      <code>$buttons('transition-duration')</code>
      <code class="right value">1s</code>
    </li>
    <li>
      <code>$buttons('transition-timing-function')</code>
      <code class="right value">linear</code>
    </li>
    
    <li class="list-sep">
      <code>$buttons('hover', 'color')</code>
      <code class="right value">default</code>
      <span class="block light">When set to default, the hover color will be set to the base button color.</span>
    </li>
    <li>
      <code>$buttons('hover', 'background')</code>
      <code class="right value">darken</code>
      <span class="block light">The color to use on <code>:hover</code>. If set to <code>lighten</code> or <code>darken</code> it will take the <code>$buttons('background')</code> color and lighten or darken it respectively using <code>$buttons('background-deg')</code> as the modifier. You can also pass a color to use for <code>:hover</code>.</span>
    </li>
    <li>
      <code>$buttons('hover', 'box-shadow')</code>
      <code class="right value">inset 0 1px 2px rgba($black, 0.1)</code>
    </li>
    <li>
      <code>$buttons('hover', 'border-color')</code>
      <code class="right value">rgba($black, 0.25)</code>
    </li>
    <li>
      <code>$buttons('hover', 'transition-duration')</code>
      <code class="right value">0.1s</code>
    </li>
    
    <li class="list-sep">
      <code>$buttons('active', 'color')</code>
      <code class="right value">default</code>
      <span class="block light">When set to default, the hover color will be set to the base button color.</span>
    </li>
    <li>
      <code>$buttons('active', 'background')</code>
      <code class="right value">darken</code>
      <span class="block light">The color to use on <code>:active</code>. If set to <code>lighten</code> or <code>darken</code> it will take the <code>$buttons('background')</code> color and lighten or darken it respectively using <code>$buttons('background-deg')</code> as the modifier. You can also pass a color to use for <code>:active</code>.</span>
    </li>
    <li>
      <code>$buttons('active', 'box-shadow')</code>
      <code class="right value">inset 0 1px 2px rgba($black, 0.2)</code>
    </li>
    <li>
      <code>$buttons('active', 'border-color')</code>
      <code class="right value">rgba($black, 0.25)</code>
    </li>
    <li>
      <code>$buttons('active', 'transition-duration')</code>
      <code class="right value">0</code>
    </li>
  </ul>
</div>
</section>

<section class="subsection subsection-mixins has-inner-subsection">
<div class="inner-subsection">
  <h1>Button Mixins</h1>
  <p class="text-lead">Button are common place on the web these days, especially in web applications. Whether you need one, or a dozen button types and styles, BaseWeb provides mixins and classes for creating beautiful buttons to add to your UI toolkit.</p>
</div>
<ul class="docs-list">
  
  <li>
    <h2>make-button</h2>
    <p>Creates the base styles for a button modifier mixin or class. Usually applied directly through a base button class, mixin or an extend placeholder. If button modifier classes are enabled, you are provided <code>.button</code> for your base button class.</p>
    <pre class="language-scss"><code>@mixin make-button( $options: () )
// @param $options
//   @type map
//   @default $buttons map</code></pre>
    <h3>Example Usage</h3>
    <p>This example shows us using a <code>%base-button</code> placeholder for the extend method. Other methods include adding <code>make-button()</code> to a general class which is applied to button elements directly (which is the method BaseWeb uses for its classes).</p>
    <pre class="language-scss"><code>%base-button {
  @include make-button();
}
.button-purchase {
  @extend %base-button;
  ...
}
.button-cart {
  @extend %base-button;
  ...
}
</code></pre>
  </li>

  <li>
    <h2>add-button-color</h2>
    <p>Handles all the color variations of a button such as color, text-shadow, background and border color.</p>
    <pre class="language-scss"><code>@mixin add-button-color( $options: () )
// @param $options
//   @type map
//   @default $buttons map</code></pre>
    
    <h3>Example Usage</h3>
    <p>Use this mixin along with <code>make-button()</code> to create custom semantic button styles. You can pass in a map to replace any of the defaults from the <code>$buttons</code> map.</p>
    <pre class="language-scss"><code>
.button-custom {
  @include make-button();
  @include add-button-color((
    'color' : $white,
    'background' : $violet
  ));
}</code></pre>
    <div class="demo demo-buttons">
      <button class="button-custom">Custom Mixin Button</button>
    </div>
    <h3>Available Classes</h3>
    <p>If you have button class modifiers enabled, BaseWeb will provide you with a set of button classes and semantic aliases ready to use right away.</p>
    <pre class="language-markup"><code>&lt;!-- .button-default default button class --&gt;
&lt;button class=&quot;button default&quot;&gt;Default&lt;/button&gt;

&lt;!-- .button.blue class with .primary & .active semantic aliases --&gt;
&lt;button class=&quot;button blue&quot;&gt;Blue&lt;/button&gt;
&lt;button class=&quot;button primary&quot;&gt;Primary&lt;/button&gt;
&lt;button class=&quot;button active&quot;&gt;Primary&lt;/button&gt;

&lt;!-- .button.green class with .success semantic alias --&gt;
&lt;button class=&quot;button green&quot;&gt;Green&lt;/button&gt;
&lt;button class=&quot;button success&quot;&gt;Success&lt;/button&gt;

&lt;!-- .button.orange class with .warning semantic alias --&gt;
&lt;button class=&quot;button orange&quot;&gt;Orange&lt;/button&gt;
&lt;button class=&quot;button warning&quot;&gt;Warning&lt;/button&gt;

&lt;!-- .button.red class with .danger semantic alias --&gt;
&lt;button class=&quot;button red&quot;&gt;Red&lt;/button&gt;
&lt;button class=&quot;button danger&quot;&gt;Danger&lt;/button&gt;

&lt;!-- .button.black class with .secondary semantic alias --&gt;
&lt;button class=&quot;button black&quot;&gt;Black&lt;/button&gt;
&lt;button class=&quot;button secondary&quot;&gt;Secondary&lt;/button&gt;</code></pre>
    <div class="demo demo-buttons">
      <button class="button default">Default</button>
      <button class="button primary">Primary Blue</button>
      <button class="button success">Success Green</button>
      <button class="button warning">Warning Orange</button>
      <button class="button danger">Danger Red</button>
      <button class="button secondary">Secondary Black</button>
    </div>
  </li>

  <li>
    <h2>add-button-size</h2>
    <p>Handles size variations for buttons. This is done by changing the padding, font-size and line-height based on the parameters passed.</p>
    <pre class="language-scss"><code>@mixin add-button-size( $size, $option: () )
// @param $size
//   @type string (small, default, large)
// @param $options
//   @type map
//   @default $buttons map</code></pre>
    <h3>Example Usage</h3>
    <p>The first parameter is a quick way to make a button use the default small or large size set in our <code>$buttons</code> map. Or you can pass in a <code>$options:()</code> map for custom padding, font-size and line-height.</p>
    <pre class="language-scss"><code>
// Use default small size
.button-small {
  @include add-button-size('small');
}

// Use default large size with custom font size
.button-custom-large {
  @include add-button-size('large', (
    'font-size': 20px
  ));
}

// Set a custom button size
.button-custom-size {
  @include add-button-size(20px 40px, (
    'font-size': 20px,
    'line-height': 24px
  ));
}
</code></pre>
    <h3>Available Classes</h3>
    <pre class="language-markup"><code>&lt;button class=&quot;button primary large&quot;&gt;Large Button&lt;/button&gt;
&lt;button class=&quot;button primary&quot;&gt;Default Button&lt;/button&gt;
&lt;button class=&quot;button primary small&quot;&gt;Small Button&lt;/button&gt;</code></pre>
    <div class="demo demo-buttons">
      <button class="button primary large">Large Button</button>
      <button class="button primary">Default Button</button>
      <button class="button primary small">Small Button</button>
    </div>
  </li>
  
  <li>
    <h2>add-button-block</h2>
    <p>Makes the button block with 100% width. This is typically used for mobile friendly buttons.</p>
    <pre class="language-scss"><code>@mixin add-button-block( $option: () )
// @param $options
//   @type map
//   @default $buttons map</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>
.button-custom-mobile {
  @include make-button();
  @include add-button-color();
  @include add-button-block();
}
</code></pre>
    <pre class="language-markup"><code>&lt;button class=&quot;button green block&quot;&gt;Block Button&lt;/button&gt;</code></pre>
    <div class="demo demo-buttons-block">
      <button class="button-custom-mobile">Block Button</button>
      <button class="button green block">Block Button</button>
    </div>
  </li>

</ul>
</section>
