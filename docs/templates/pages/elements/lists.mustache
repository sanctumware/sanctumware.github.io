<h1>Lists</h1>
<p>Lists in HTML come in three flavors: unordered, ordered and description lists. BaseWeb has some pretty basic default styles for all three type and a variety of list mixins and classes for stylistic variation.</p>

<h2>Unordered Lists</h2>
<p>The <code>&lt;ul&gt;</code> element represents a list of items, where the order of the items is not important. So if you changed the order, the meaning of the list would stay the same.</p>
<pre class="language-markup"><code>&lt;ul&gt;
  &lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;</code></pre>
<div class="demo">
  <ul>
    <li>List Item</li>
    <li>List Item
      <ul>
        <li>Nested List Item</li>
        <li>Nested List Item</li>
        <li>Nested List Item</li>
      </ul>
    </li>
    <li>List Item</li>
    <li>List Item</li>
    <li>List Item</li>
  </ul>
</div>

<h2>Ordered Lists</h2>
<p>The <code>&lt;ol&gt;</code> element represents a list of items, where the items have been intentionally ordered, such that changing the order would change the meaning of the list.</p>
<pre class="language-markup"><code>&lt;ol&gt;
  &lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;</code></pre>
<div class="demo">
  <ol>
    <li>List item one</li>
    <li>List item two
      <ol>
        <li>Nested list item one</li>
        <li>Nested list item two</li>
        <li>Nested list item three</li>
      </ol>
    </li>
    <li>List item three</li>
    <li>List item four</li>
    <li>List item five</li>
  </ol>
</div>

<h2>Description Lists</h2>
<p>The <code>&lt;dl&gt;</code> element represents an association list consisting of zero or more name-value groups (a description list).</p>
<pre class="language-markup"><code>&lt;dl&gt;
  &lt;dt&gt;...&lt;/dt&gt;
  &lt;dd&gt;...&lt;/dd&gt;
&lt;/dl&gt;</code></pre>
<div class="demo">
  <dl>
    <dt>Base</dt>
    <dd>The lowest part or edge of something, especially the part on which it rests or is supported.</dd>
    <dt>Web</dt>
    <dd>An information system on the Internet that allows documents to be connected to other documents by hypertext links, enabling the user to search for information by moving from one document to another.</dd>
  </dl>
</div>

<section class="subsection subsection-variables has-inner-subsection">
<div class="inner-subsection">
  <h1>List Variables</h1>
  <p class="text-lead">List variables are encompassed within the <code>$lists</code> map and are used throughout all list mixins to set default values.</p>
<ul class="docs-list docs-list-compact">
  <li>
    <code>$lists('classes')</code>
    <code class="right value">true</code>
    <span class="block light">Whether or not we should output modifier classes. Set to <code>false</code> if you want to use the list modifier mixins semantically and/or reduce CSS output.</span>
  </li>
  <li><code>$lists('nth')</code> <code class="right value">odd</code></li>

  <li><code>$lists('margin')</code> <code class="right value">1rem 0</code></li>
  <li><code>$lists('padding')</code> <code class="right value">1rem</code></li>
  
  <li><code>$lists('background')</code> <code class="right value">none</code></li>
  <li><code>$lists('background-stripe')</code> <code class="right value">rgba($black, 0.05)</code></li>
  <li><code>$lists('background-hover')</code> <code class="right value">$yellow-pale</code></li>
  
  <li><code>$lists('border')</code> <code class="right value">1px solid rgba($black, 0.1)</code></li>
  <li><code>$lists('border-radius')</code> <code class="right value">$border-radius</code></li>
</ul>
</div>
</section>

<section class="subsection subsection-mixins has-inner-subsection">
<div class="inner-subsection">
  <h1>List Mixins</h1>
  <p class="text-lead">Lists are used to describe a wide range of content on the web, especially in UI design. A lot of the time, you don't want a list to look like a standard list with bullets. BaseWeb provides mixins and classes for creating commonly used list styles.</p>
</div>
<ul class="docs-list">
  
  <li>
    <h2>make-list</h2>
    <p>Creates the base styles for a list modifier mixin or class. Usually applied directly through a base list class, mixin or an extend placeholder. If list modifier classes are enabled, you are provided <code>.list</code> for your base button class.</p>
    <pre class="language-scss"><code>@mixin make-list( $options: () )
// @param $options
//   @type map
//   @default $lists map</code></pre>
    <h3>Example Usage</h3>
    <p>Using the base list mixin for custom tables. This example shows us using a <code>%base-list</code> placeholder for the extend method.</p>
    <pre class="language-scss"><code>%base-list {
  @include make-list();
}
.list-example-1 {
  @extend %base-list;
  ...
}
.list-example-2 {
  @extend %base-list;
  ...
}</code></pre>
  </li>
  
  <li>
    <h2>add-list-rowed</h2>
    <p>Adds borders to a list that divide list items. Requires the use of base list styles through base list class, mixin or extend.</p>
    <pre class="language-scss"><code>@mixin add-list-rowed( $options: () )
// @param $options
//   @type map
//   @default $lists map</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>.custom-list {
  @include make-list();
  @include add-list-rowed();
}</code></pre>
    <pre class="language-markup"><code>&lt;ul class=&quot;list rowed&quot;&gt;...&lt;/ul&gt;</code></pre>
    <div class="demo">
      <ul class="list rowed">
        <li>List Item</li>
        <li>List Item
          <ul>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
          </ul>
        </li>
        <li>List Item</li>
        <li>List Item</li>
        <li>List Item</li>
      </ul>
    </div>
    <p>In the case where you don't want to create left and right padding on a list, you can pass a custom padding through the base list mixin <code>make-list(('padding':10px 0))</code>, or use the <code>.flush</code> class to make the list flush to both sides.</p>
    <pre class="language-scss"><code>.custom-list {
  @include make-list(('padding':10px 0));
  @include add-list-rowed();
}</code></pre>
    <pre class="language-markup"><code>&lt;ul class=&quot;list rowed flush&quot;&gt;...&lt;/ul&gt;</code></pre>
    <div class="demo">
      <ul class="list rowed flush">
        <li>List Item</li>
        <li>List Item
          <ul>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
          </ul>
        </li>
        <li>List Item</li>
        <li>List Item</li>
        <li>List Item</li>
      </ul>
    </div>
  </li>
  
  <li>
    <h2>add-list-bordered</h2>
    <p>Adds borders to a list that wraps the list and divides list items. Requires the use of base list styles through base list class, mixin or extend.</p>
    <pre class="language-scss"><code>@mixin add-list-bordered( $options: () )
// @param $options
//   @type map
//   @default $lists map</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>.custom-list {
  @include make-list();
  @include add-list-bordered();
}</code></pre>
    <pre class="language-markup"><code>&lt;ul class=&quot;list bordered&quot;&gt;...&lt;/ul&gt;</code></pre>
    <div class="demo">
      <ul class="list bordered">
        <li>List Item</li>
        <li>List Item
          <ul>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
          </ul>
        </li>
        <li>List Item</li>
        <li>List Item</li>
        <li>List Item</li>
      </ul>
    </div>
  </li>
  
  <li>
    <h2>add-list-rounded</h2>
    <p>Gives a list rounded borders depending on parameters passed.</p>
    <pre class="language-scss"><code>@mixin add-list-rounded( $radius, $options: () )
// @param $radius
//   @type unit (pixel, percent)
//   @default default ($lists('border-radius'))
// @param $options
//   @type map
//   @default $lists map</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>.custom-list {
  @include make-list();
  @include add-list-bordered();
  @include add-list-rounded();
}</code></pre>
    <pre class="language-markup"><code>&lt;ul class=&quot;list bordered rounded&quot;&gt;...&lt;/ul&gt;</code></pre>
    <div class="demo">
      <ul class="list bordered rounded">
        <li>List Item</li>
        <li>List Item
          <ul>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
          </ul>
        </li>
        <li>List Item</li>
        <li>List Item</li>
        <li>List Item</li>
      </ul>
    </div>
  </li>
  
  <li>
    <h2>add-list-striped</h2>
    <p>Gives a list items alternating background colors.</p>
    <pre class="language-scss"><code>@mixin add-list-striped( $nth, $options: () )
// @param $nth
//   @type nth (odd, even)
//   @default default ($lists('nth'))
// @param $options
//   @type map
//   @default $lists map</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>.custom-list {
  @include make-list();
  @include add-list-bordered();
  @include add-list-striped();
}</code></pre>
    <pre class="language-markup"><code>&lt;ul class=&quot;list rowed striped&quot;&gt;...&lt;/ul&gt;</code></pre>
    <div class="demo">
      <ul class="list rowed striped">
        <li>List Item</li>
        <li>List Item
          <ul>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
          </ul>
        </li>
        <li>List Item</li>
        <li>List Item</li>
        <li>List Item</li>
      </ul>
    </div>
  </li>
  
  <li>
    <h2>add-list-hover</h2>
    <p>Gives list hover styles for list items.</p>
    <pre class="language-scss"><code>@mixin add-list-hover( $bg-hover, $options: () )
// @param $bg-hover
//   @type color
//   @default default ($lists('background-hover'))
// @param $options
//   @type map
//   @default $lists map</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>.custom-list {
  @include make-list();
  @include add-list-bordered();
  @include add-list-hover();
}</code></pre>
    <pre class="language-markup"><code>&lt;ul class=&quot;list rowed hover&quot;&gt;...&lt;/ul&gt;</code></pre>
    <div class="demo">
      <ul class="list rowed hover">
        <li>List Item</li>
        <li>List Item
          <ul>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
            <li>Nested List Item</li>
          </ul>
        </li>
        <li>List Item</li>
        <li>List Item</li>
        <li>List Item</li>
      </ul>
    </div>
  </li>
  
</ul>
</section>
