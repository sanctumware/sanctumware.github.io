<section class="page">
  <div class="content-inner">

    <h1 class="docs-header">Usage</h1>
    
    <p>BaseWeb is designed to be worked on within a SCSS development workflow. The easiest way to get started is to open up <code>_baseweb.scss</code> and include all the modules that your project needs and comment out all the ones that you don't.</p>

<pre class="language-scss"><code>// Settings (Required)
@import "settings/palette";
@import "settings/media";
@import "settings/grid";
@import "settings/typography";
@import "settings/global";

// Core (Required)
@import "core/functions";
@import "core/mixins";
@import "core/media";
@import "core/grid";

// Elements
...

// Blocks
...

// Custom
...
</code></pre>

    <p>At a bare minimum, the only required files are in the settings and core directories. These files also don't output any CSS directly so the CSS footprint of using BaseWeb is nonexistent. This puts all the power of CSS output into the hands of the author.</p>
    
    <h2 class="docs-header">Elements, Blocks and Custom</h2>
    
    <p>BaseWeb's organizes its CSS output in three categories: Elements, Blocks and Custom.</p>
    
    <dl>
      <dt>Elements</dt>
      <dd>A full range of element modules are included in BaseWeb that add base styles, classes, variables and mixins for styling the most basic of HTML elements.</dd>
      <dt>Blocks</dt>
      <dd>Blocks on the other hand are a collection of HTML elements that form a component. Think of it like the difference between an unordered list (element) and a breadcrumb (block).</dd>
      <dt>Custom</dt>
      <dd>The custom directory is where an author stores their project specific styles. The great thing about keeping custom styles tied to the BaseWeb output is that it makes all variables, functions and mixins available throughout a project. It also means that all your styles are output in a single CSS file which reduced server requests.</dd>
    </dl>
    
    <h2 class="docs-header">Compiling BaseWeb</h2>
    
    <p>While the BaseWeb docs are built using <a href="https://www.google.com/search?q=node.js&oq=node&aqs=chrome.1.69i57j0j69i59l2j0l2.2811j0j1&sourceid=chrome&es_sm=119&ie=UTF-8">Node</a>, <a href="http://jakejs.com/">Jake</a> and the <a href="https://www.npmjs.com/package/node-sass">node-sass</a> module to compile and minify the CSS output, you can use any method for your project workflow.</p>
    
    <p>It is recommended that you output both a non-compressed CSS file along with a production ready CSS file. This is mainly for monitoring your CSS footprint while working with BaseWeb.</p>

<pre class="language-javascript"><code>var 'scss' = ({
  'input'   : '/scss/_baseweb.scss',
  'output'  : '/css/baseweb.css',
  'style'   : 'expanded'
}, {
  'input'   : '/scss/_baseweb.scss',
  'output'  : '/css/baseweb.min.css',
  'style'   : 'compressed'
});
</code></pre>

  </div>
</section>