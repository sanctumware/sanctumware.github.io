// Set file variable
$filename: 'scss/elements/_tables.scss';

////////////////////////////////////////////////////////////////////////////////
// @Table Variables
////////////////////////////////////////////////////////////////////////////////

$tables: (
  'classes' : true,
  
  'valign' : top,
  'nth' : odd,
  'stripe' : horizontal,
  
  'margin' : 1em 0,
  'padding-condensed' : 0.25em 0.5em,
  'padding' : 0.5em 0.75em,
  'padding-expanded' : 1em 1.25em,
  
  'background' : none,
  'background-stripe' : rgba($black, 0.05),
  'background-hover' : $yellow-pale,
  'border' : 1px solid rgba($black, 0.1),
  'border-radius' : $border-radius,
  
) !default;

////////////////////////////////////////////////////////////////////////////////
// @Table Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Table Base
// Creates the base styles for a table modifer mixin or class. Usually applied
// directly through a mixin or `%table-base` placeholder.
// @param $options
//   @type map
//   @default $tables map
@mixin make-table($options: ()) {
  $o: map-merge($tables, $options);
  margin: map-get($o, 'margin');
  background: map-get($o, 'background');
  border-collapse: separate;
  td, th {
    padding: map-get($o, 'padding');
  }
}

// Add Table Rowed
// Adds borders to a table that divide table rows.
// @param $options
//   @type map
//   @default $tables map
@mixin add-table-rowed($options: ()) {
  $o: map-merge($tables, $options);
  td, th {
    border-bottom: map-get($o, 'border');
  }
  thead:first-child,
  tfoot:first-child,
  tbody:first-child {
    tr:first-child {
      td, th {
        border-top: map-get($o, 'border');
      }
    }
  }
}

// Add Table Columned
// Adds borders to a table that divide table columns.
// @param $options
//   @type map
//   @default $tables map
@mixin add-table-columned($options: ()) {
  $o: map-merge($tables, $options);
  td, th {
    border-right: map-get($o, 'border');
  }
  tr {
    td:first-child, th:first-child { 
      border-left: map-get($o, 'border');
    }
  }
}

// Add Table Bordered
// Adds borders to a table that divide table cells.
// @param $options
//   @type map
//   @default $tables map
@mixin add-table-bordered($options: ()) {
  $o: map-merge($tables, $options);
  @include add-table-rowed($o);
  @include add-table-columned($o);
}

// Add Table Size
// Toggles a tables padding size between condensed, expanded or a custom
// padding value.
// @param $size
//   @type condensed | expanded | unit (pixel, em, percent)
// @param $options
//   @type map
//   @default $tables map
@mixin add-table-size($size, $options: ()) {
  $o: map-merge($tables, $options);
  @if ($size == condensed) {
    td, th {
      padding: map-get($o, 'padding-condensed');
    }
  } @else if ($size == expanded) {
    td, th {
      padding: map-get($o, 'padding-expanded');
    }
  } @else {
    td, th {
      padding: $size;
    }
  }
}

// Add Table Rounded
// Gives a table rounded borders depending on parameters passed.
// @param $radius
//   @type unit (pixel, percent)
//   @default default ($tables('border-radius'))
// @param $options
//   @type map
//   @default $tables map
@mixin add-table-rounded($radius: default, $options: ()) {
  $o: map-merge($tables, $options);
  @if ($radius != default) {
    $o: map-merge($o, ('border-radius': $radius));
  }
  @include border-radius(map-get($o, 'border-radius'));
  thead:first-child,
  tfoot:first-child,
  tbody:first-child {
    tr:first-child {
      td:first-child, th:first-child {
        @include border-radius-top-left(map-get($o, 'border-radius'));
      }
      td:last-child, th:last-child {
        @include border-radius-top-right(map-get($o, 'border-radius'));
      }
    }
  }
  thead:last-child,
  tfoot:last-child,
  tbody:last-child {
    tr:last-child {
      td:first-child, th:first-child {
        @include border-radius-bottom-left(map-get($o, 'border-radius'));
      }
      td:last-child, th:last-child {
        @include border-radius-bottom-right(map-get($o, 'border-radius'));
      }
    }
  }
}

// Add Table Stripes
// Gives a table stripes either vertical or horizontal depending on
// parameters passed.
// @param $nth
//   @type nth (odd, even)
//   @default default ($tables('nth'))
// @param $dir
//   @type orientation of stripes (vertical, horizontal)
//   @default default ($tables('stripe'))
// @param $options
//   @type map
//   @default $tables map
@mixin add-table-stripes($nth: default, $dir: default, $options: ()) {
  $o: map-merge($tables, $options);
  @if ($nth != default) {
    $o: map-merge($o, ('nth': $nth));
  }
  @if ($dir != default) {
    $o: map-merge($o, ('stripe': $dir));
  }
  @if (map-get($o, 'stripe') == vertical) {
    tr {
      td:nth-of-type(#{map-get($o, 'nth')}),
      th:nth-of-type(#{map-get($o, 'nth')}) {
        background-color: map-get($o, 'background-stripe');
      }
    }
  } @else {
    tbody tr:nth-of-type(#{map-get($o, 'nth')}) {
      td, th {
        background-color: map-get($o, 'background-stripe');
      }
    }
  }
}

// Add Table Hover
// Gives table hover styles for rows.
// @param $bg-hover
//   @type color
//   @default default ($tables('background-hover'))
// @param $options
//   @type map
//   @default $tables map
@mixin add-table-hover($bg-hover: default, $options: ()) {
  $o: map-merge($tables, $options);
  @if ($bg-hover != default) {
    $o: map-merge($o, ('background-hover': $bg-hover));
  }
  tbody tr td {
    @include transition(background-color 0.25s linear);
  }
  tbody tr:hover td {
    background-color: map-get($o, 'background-hover');
  }
}

// Add Table Alignment
// Sets the vertical and text alignment of a table if a parameter is passed.
// @param $options
//   @type map ('vertical-align', 'text-align')
//   @default map (none, none)
@mixin add-table-alignment($options: ()) {
  $o: map-merge((
    'vertical-align' : none,
    'text-align' : none,
  ), $options);
  @if (map-get($o, 'vertical-align') != none) {
    tr {
      vertical-align: map-get($o, 'vertical-align');
    }
  }
  @if (map-get($o, 'text-align') != none) {
    tr td, tr th {
      text-align: map-get($o, 'text-align');
    }
  }
}

// Make Table Responsive
// When added to a wrapping element of a table, will make the table responsive
// for tablets and below.
// @param $options
//   @type map
//   @default $tables map
@mixin make-table-responsive($options: ()) {
  $o: map-merge($tables, $options);
  margin: map-get($o, 'margin');
  > table {
    margin: 0;
  }
  @include media-max('tablet') {
    overflow: auto;
    > table td,
    > table th {
      white-space: nowrap;
    }
  }
}

/*==============================================================================
  @Tables - #{$filename}
==============================================================================*/

table {
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%; 
  max-width: 100%;
  margin: 1rem 0;
  overflow: auto;
  
  tr {
    vertical-align: map-get($tables, 'valign');
  }
  th {
    color: $color-header;
    font-weight: bold;
    text-align: left;
  }
}

// Check if we should output modifier classes
@if (map-get($tables, 'classes') == true) {

/*==============================================================================
  @Table Modifiers - #{$filename}
==============================================================================*/

/**
 * Base Modifiers Styles
 */
.table {
  @include make-table();
}

/**
 * Border Variations
 */
.table.rowed {
  @include add-table-rowed();
}
.table.columned {
  @include add-table-columned();
}
.table.bordered {
  @include add-table-bordered();
}

/**
 * Padding Variations
 */
.table.condensed {
  @include add-table-size(condensed);
}
.table.expanded {
  @include add-table-size(expanded);
}

/**
 * Miscellaneous Modifiers
 */
.table.rounded {
  @include add-table-rounded();
}
.table.striped {
  @include add-table-stripes();
}
.table.striped-horizontal {
  @include add-table-stripes(default, horizontal);
}
.table.striped-vertical {
  @include add-table-stripes(default, vertical);
}
.table.hover {
  @include add-table-hover();
}

/**
 * Table Alignment Modifiers
 */
.table.valign-baseline {
  @include add-table-alignment(('vertical-align': baseline));
}
.table.valign-top {
  @include add-table-alignment(('vertical-align': top));
}
.table.valign-middle {
  @include add-table-alignment(('vertical-align': middle));
}
.table.valign-bottom {
  @include add-table-alignment(('vertical-align': bottom));
}
.table.align-left {
  @include add-table-alignment(('text-align': left));
}
.table.align-center {
  @include add-table-alignment(('text-align': center));
}
.table.align-right {
  @include add-table-alignment(('text-align': right));
}

/**
 * Responsive Tables
 */
.table-responsive {
  @include make-table-responsive();
}

} // endif classes
