// Set file variable
$filename: 'scss/elements/_forms.scss';

// Dependencies
// ---
// @mixin build-grid-system() - scss/core/_grid.scss

////////////////////////////////////////////////////////////////////////////////
// @Form Variables
////////////////////////////////////////////////////////////////////////////////

$forms: (
  'vertical-spacing' : 1.5em,
  'vertical-align' : 0.75em,
  'font-family' : inherit,
  'base-font-size' : 1em,
  'base-line-height' : 1.5em,
  'font-size' : 1em,
  'line-height' : 1.5em,
  'color' : $color,
  'color-label' : $color-dark,
  'color-placeholder' : #aaa,
  'color-select-arrow' : $color-dark,
  'border-radius' : $border-radius,
  
  'input' : (
    'padding' : 0.75em,
    'background' : rgba($white, 0.5),
    'border' : 1px solid rgba($black, 0.2),
    'box-shadow' : (0 1px 3px rgba($black, 0), inset 0 1px 3px rgba($black, 0.05)),
    
    'focus' : (
      'background': rgba($white, 1),
      'border': 1px solid rgba($blue, 1),
      'box-shadow': (0 1px 3px rgba($black, 0.05), inset 0 1px 3px rgba($black, 0)),
    )
  ),
  
  'choice' : (
    'padding' : 0.75em 0.75em 0.75em 2.25em,
    'background' : rgba($black, 0.05),
    'border' : 1px solid transparent,
    'box-shadow' : none,
  )
) !default;

////////////////////////////////////////////////////////////////////////////////
// @Form Mixins
////////////////////////////////////////////////////////////////////////////////

// Placeholder
// Sets the placeholder text color for input fields that use the
// placeholder attribute.
// @param $color
//   @type color
// @param $options
//   @type map
//   @default $forms map
@mixin placeholder($color: default, $options: ()) {
  $o: map-merge($forms, $options);
  
  @if ($color != default) {
    $o: map-merge($o, ('color-placeholder': $color));
  }
  
  &::-webkit-input-placeholder {
     color: map-get($o, 'color-placeholder');
  }
  &:-moz-placeholder {
     color: map-get($o, 'color-placeholder');
  }
  &::-moz-placeholder {
     color: map-get($o, 'color-placeholder');
  }
  &:-ms-input-placeholder {  
     color: map-get($o, 'color-placeholder');
  }
}

// Make Form Group Base
// Creates the styles for a base form group by applying vertical spacing.
// @param $options
//   @type map
//   @default $forms map
@mixin make-form-group-base($options: ()) {
  $o: map-merge($forms, $options);
  
  margin-bottom: map-get( $o, 'vertical-spacing' );
  
  &:last-child {
    margin-bottom: 0;
  }
}

// Make Form Group Inline
// Creates the styles for making an inline form group element.
// @param $options
//   @type map
//   @default $forms map
@mixin make-form-group-inline($options: ()) {
  $o: map-merge($forms, $options);
  
  @include clearfix();
  margin-right: -(map-get( $forms, 'vertical-align' ));
  margin-bottom: map-get( $o, 'vertical-spacing' ) / 2;
  
  &:last-child {
    margin-bottom: -(map-get( $o, 'vertical-spacing' ) / 2);
  }
}

// Make Input Inline
// Creates the styles for making an inline form element.
// @param $options
//   @type map
//   @default $forms map
@mixin make-input-inline($options: ()) {
  $o: map-merge($forms, $options);
  
  float: left;
  width: auto;
  margin-right: map-get( $o, 'vertical-align' );
  margin-bottom: map-get( $o, 'vertical-spacing' ) / 2;
  
  @if ($class-float-right != none) {
    &.#{$class-float-right} {
      float: right;
    }
  }
}

/*==============================================================================
  @Form Structure - #{$filename}
==============================================================================*/

/**
 * Form Structure Elements
 */
form {
  margin: (map-get( $forms, 'vertical-spacing' ) * 1.5) 0;
  font-size: map-get($forms, 'base-font-size');
  line-height: map-get($forms, 'base-line-height');
}

/**
 * Fieldset
 */
fieldset {
  margin: map-get( $forms, 'vertical-spacing' ) 0;
  padding: 0;
  border: 0 none;
}

/**
 * Legends
 */
legend {
  display: inline-block;
  margin: 0 -(map-get( $forms, 'vertical-spacing' ) / 2) (map-get( $forms, 'vertical-spacing' ) / 2);
  padding: 0 (map-get( $forms, 'vertical-spacing' ) / 2);
  font-size: px-to-em(22px);
  line-height: 1.5em;
  font-weight: bold;
  color: map-get( $forms, 'color-label' );
  border: 0 none;
}

form {
  .row {
    margin-bottom: map-get( $forms, 'vertical-spacing' ) / 2;
  }
  .row:last-child {
    margin-bottom: 0;
  }
  .col {
    margin-bottom: map-get( $forms, 'vertical-spacing' ) / 2;
  }
  .col:last-child {
    margin-bottom: 0;
  }
}

@include media-min('medium') {
  form .col {
    margin-bottom: 0;
  }
}

/*==============================================================================
  @Form Groups - #{$filename}
==============================================================================*/

/**
 * Form Group
 */
.form-group {
  @include make-form-group-base();
}
.form-group.inline {
  @include make-form-group-inline();
  
  > * {
    @include make-input-inline();
  }
  .form-group,
  .input-group {
    display: inline-block;
    vertical-align: top;
    margin: 0 (map-get( $forms, 'vertical-spacing' ) / 2) 0 0;
    
    &:last-child {
      margin-right: 0;
    }
  }
}

/**
 * Header Group
 */
.form-header {
  @include make-form-group-base();
  color: $color-light;
  
  h1, h2, h3, h4, h5, h6 {
    margin: (map-get( $forms, 'vertical-spacing' ) / 3) 0;
    font-size: (map-get($forms, 'font-size') * 1.4);
    line-height: 1.2em;
  }
  p {
    margin: (map-get( $forms, 'vertical-spacing' ) / 3) 0;
    color: $color-light;
  }
}

/**
 * Action Group
 */
.form-action {
  @include make-form-group-base();
  @include clearfix();
  
  .button,
  .input-align {
    float: left;
    margin: 0 (map-get( $forms, 'vertical-spacing' ) / 2) 0 0;
    
    &:last-child {
      margin-right: 0;
    }
    
    @if ($class-float-right != none) {
      &.#{$class-float-right} {
        float: right;
      }
    }
  }
  .input-align {
    margin-top: map-get( $forms, 'vertical-align' );
    border-top: map-fetch( $forms, 'input' 'border' );
    border-color: transparent;
  }
  
  &.form-action-center {
    text-align: center;
    
    .button,
    .input-align {
      display: inline-block;
      float: none;
      
    }
  }
}

/**
 * Input Group
 */
.input-group {
  @include make-form-group-base();
}
.input-group.inline {
  @include make-form-group-inline();
  
  > * {
    @include make-input-inline();
  }
}

/*==============================================================================
  @Form Elements - #{$filename}
==============================================================================*/

/**
 * Labels
 */
label {
  display: inline-block;
  margin: 0 0 (map-get( $forms, 'vertical-spacing' ) / 3) 0;
  font-size: map-get($forms, 'font-size');
  line-height: map-get($forms, 'line-height');
  font-weight: 600;
  color: map-get( $forms, 'color-label' );
  
  &:last-child {
    margin-bottom: 0;
  }
  
  &.sub {
    font-weight: normal;
  }
  &.hide {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    border: 0;
  }
  &.block {
    display: block;
    padding-top: map-get( $forms, 'vertical-align' );
    border-top: map-fetch( $forms, 'input' 'border' );
    border-color: transparent;
  }
  &.inline {
    display: inline-block;
    padding-top: map-get( $forms, 'vertical-align' );
    border-top: map-fetch( $forms, 'input' 'border' );
    border-color: transparent;
  }
}
.inline {
  label.block,
  label.inline {
    padding-bottom: map-get( $forms, 'vertical-align' );
    border-top: map-fetch( $forms, 'input' 'border' );
    border-color: transparent;
  }
}

/**
 * Base Inputs
 */
.input,
.checkbox,
.radio,
.choice {
  position: relative;
  display: block;
  width: 100%;
  margin: 0 0 (map-get( $forms, 'vertical-spacing' ) / 2) 0;
    
  &:last-child {
    margin-bottom: 0;
  }
}

/**
 * Text Inputs
 */
.input {
  padding: map-fetch( $forms, 'input' 'padding' );
  font-family: map-get( $forms, 'font-family' );
  font-size: map-get( $forms, 'font-size' );
  line-height: map-get( $forms, 'line-height' );
  color: map-get( $forms, 'color' );
  background-color: map-fetch( $forms, 'input' 'background' );
  border: map-fetch( $forms, 'input' 'border' );
  box-shadow: map-fetch( $forms, 'input' 'box-shadow' );
  @include box-sizing(border-box);
  @include border-radius(map-get( $forms, 'border-radius' ));
  @include placeholder();
  @include transition(border-color 0.25s, background-color 0.25s, box-shadow 0.25s);
  
  &:focus {
    outline: none;
    background-color: map-fetch( $forms, 'input' 'focus' 'background' );
    border: map-fetch( $forms, 'input' 'focus' 'border' );
    box-shadow: map-fetch( $forms, 'input' 'focus' 'box-shadow' );
  }
  
  &.disabled,
  &[readonly],
  &[disabled] {
    opacity: 0.5;
    background: rgba($black, 0.05);
  }
}

/**
 * Checkbox, Radio & Choice Classes
 */
.checkbox,
.radio,
.choice {
  cursor: pointer;
  color: $color;
  font-weight: normal;
  
  &.disabled {
    opacity: 0.5;
  }
}
.choice {
  padding: map-fetch( $forms, 'choice' 'padding' );
  background: map-fetch( $forms, 'choice' 'background' );
  border: map-fetch( $forms, 'choice' 'border' );
  box-shadow: map-fetch( $forms, 'choice' 'box-shadow' );
  @include border-radius(map-get( $forms, 'border-radius' ));
  
  input[type="checkbox"],
  input[type="radio"] {
    position: absolute;
    top: auto;
    margin: 5px 0 0 -20px;
  }
}

input[type="checkbox"],
input[type="radio"] {
  position: relative;
  top: -1px;
  margin: 0 5px 0 0;
}

/**
 * Other Inputs
 */
input[type="file"],
input[type="range"] {
  display: block;
  margin: 0 0 (map-get( $forms, 'vertical-spacing' ) / 2) 0;
}
input[type="range"] {
  width: 100%;
}
input[type="search"] {
  -webkit-appearance: none;
}
input[type="color"].input {
  width: 3.125rem;
  height: 3.125rem;
  padding: (map-fetch( $forms, 'input' 'padding' ) / 3);
}

/**
 * Textarea
 */
textarea.input {
  height: auto;
  max-width: 100%;
}

/**
 * Select
 */
select.input {
  -webkit-appearance: none;
  -moz-appearance: none;
  background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='20' height='4'><polygon fill='"+ map-get($forms, 'color-select-arrow') +"' points='0,0 3,4 3,4 6,0 '/></svg>");
  background-position: 100% center;
  background-repeat: no-repeat;
  padding-right: 30px;
}
select[multiple].input,
select[size].input {
  height: auto;
  padding: map-fetch( $forms, 'input' 'padding' );
  background-image: none;
}

/*==============================================================================
  @Form Utilities - #{$filename}
==============================================================================*/

/**
 * Notes
 */
.note {
  margin-bottom: map-get( $forms, 'vertical-spacing' ) / 2;
  font-size: map-get($forms, 'font-size');
  color: $color-light;
  
  &:last-child {
    margin-bottom: 0;
  }
  
  p {
    margin: 0 0 (map-get( $forms, 'vertical-spacing' ) / 2) 0;
    &:last-child {
      margin-bottom: 0;
    }
  }
}
label + .note {
  margin-top: 0;
}
.form-group + .note,
.input-group + .note {
  margin-top: -(map-get( $forms, 'vertical-spacing' ) / 2);
}

/**
 * Required Classes
 */
.req {
  color: $red;
}

/**
 * Inline Inputs
 */
label.inline,
.button.inline,
.input.inline,
.checkbox.inline,
.radio.inline,
.choice.inline,
.inline label,
.inline .button,
.inline .input,
.inline .checkbox,
.inline .radio,
.inline .choice {
  @include make-input-inline();
}

/**
 * Disabled
 */
.disabled,
fieldset[disabled] {
  input[type="file"],
  input[type="range"],
  input[type="checkbox"],
  input[type="radio"],
  .input,
  .checkbox,
  .radio,
  .choice {
    opacity: 0.5;
  }
  .input {
    background: rgba($black, 0.05);
  }
}

/*==============================================================================
  @Validation States - #{$filename}
==============================================================================*/
  
/**
 * Success
 */
// Success class applied to elements
.input {
  &.success {
    border-color: $green;
  }
}
.checkbox,
.radio,
.note {
  &.success {
    color: $green-darker;
  }
}
.choice {
  &.success {
    background-color: rgba($green, 0.1);
  }
}

// Success class applied to wrapper
.success {
  .input {
    border-color: $green;
  }
  .checkbox,
  .radio,
  .note {
    color: $green-darker;
  }
  .choice {
    background-color: rgba($green, 0.1);
  }
}
  
/**
 * Warning
 */
// Warning class applied to elements
.input {
  &.warning {
    border-color: $yellow-dark;
  }
}
.checkbox,
.radio,
.note {
  &.warning {
    color: $yellow-darker;
  }
}
.choice {
  &.warning {
    background-color: rgba($yellow-dark, 0.15);
  }
}

// Warning class applied to wrapper
.warning {
  .input {
    border-color: $yellow-dark;
  }
  .checkbox,
  .radio,
  .note {
    color: $yellow-darker;
  }
  .choice {
    background-color: rgba($yellow-dark, 0.15);
  }
}
  
/**
 * Error
 */
// Error class applied to elements
.input {
  &.error {
    border-color: $red;
  }
}
.checkbox,
.radio,
.note {
  &.error {
    color: $red-darker;
  }
}
.choice {
  &.error {
    background-color: rgba($red, 0.1);
  }
}

// Error class applied to wrapper
.error {
  .input {
    border-color: $red;
  }
  .checkbox,
  .radio,
  .note {
    color: $red-darker;
  }
  .choice {
    background-color: rgba($red, 0.1);
  }
}
  
/**
 * Active
 */
// Active class applied to elements
.input {
  &.active {
    border-color: $blue;
  }
}
.checkbox,
.radio,
.note {
  &.active {
    color: $blue-darker;
  }
}
.choice {
  &.active {
    background-color: rgba($blue, 0.1);
  }
}

// Active class applied to wrapper
.active {
  .input {
    border-color: $blue;
  }
  .checkbox,
  .radio,
  .note {
    color: $blue-darker;
  }
  .choice {
    background-color: rgba($blue, 0.1);
  }
}
