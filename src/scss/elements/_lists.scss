// Set file variable
$filename: 'scss/elements/_lists.scss';

////////////////////////////////////////////////////////////////////////////////
// @List Variables
////////////////////////////////////////////////////////////////////////////////

$lists: (
  'classes' : true,
  
  'nth' : odd,
  'margin' : 1rem 0,
  'padding' : 1rem,
  
  'background' : none,
  'background-stripe' : rgba($black, 0.05),
  'background-hover' : $yellow-pale,
  'border' : 1px solid rgba($black, 0.1),
  'border-radius' : $border-radius,
  
) !default;

////////////////////////////////////////////////////////////////////////////////
// @Table Mixins
////////////////////////////////////////////////////////////////////////////////

// Make List
// Creates the base styles for a list modifer mixin or class. Usually applied
// directly through a mixin or `%list-base` placeholder.
// @param $options
//   @type map
//   @default $lists map
@mixin make-list($options: ()) {
  $o: map-merge($lists, $options);
  
  list-style: none;
  margin: map-get($o, 'margin');
  background: map-get($o, 'background');
  
  > li {
    margin: 0;
    padding: map-get($o, 'padding');
    background-clip: padding-box;
    @include clearfix();
  }
  
}

// Add List Rowed
// Adds borders to a list that divide list items.
// @param $options
//   @type map
//   @default $lists map
@mixin add-list-rowed($options: ()) {
  $o: map-merge($lists, $options);
  
  > li {
    border-bottom: map-get($o, 'border');
  }
  > li:first-child  {
    border-top: map-get($o, 'border');
  }
  
}

// Add List Bordered
// Adds borders to a list that wraps the list and divides list items.
// @param $options
//   @type map
//   @default $lists map
@mixin add-list-bordered($options: ()) {
  $o: map-merge($lists, $options);
  
  border: map-get($o, 'border');
  
  > li {
    border-bottom: map-get($o, 'border');
  }
  > li:last-child  {
    border-bottom: 0 none;
  }
  
}

// Add List Rounded
// Gives a list rounded borders depending on parameters passed.
// @param $radius
//   @type unit (pixel, percent)
//   @default default ($lists('border-radius'))
// @param $options
//   @type map
//   @default $lists map
@mixin add-list-rounded($radius: default, $options: ()) {
  $o: map-merge($lists, $options);
  
  @if ($radius != default) {
    $o: map-merge($o, ('border-radius': $radius));
  }
  
  @include border-radius(map-get($o, 'border-radius'));
  > li:first-child {
    @include border-radius-top(map-get($o, 'border-radius'));
  }
  > li:last-child {
    @include border-radius-bottom(map-get($o, 'border-radius'));
  }
  
}

// Add List Striped
// Gives a list items alternating background colors.
// @param $nth
//   @type nth (odd, even)
//   @default default ($lists('nth'))
// @param $options
//   @type map
//   @default $lists map
@mixin add-list-striped($nth: default, $options: ()) {
  $o: map-merge($lists, $options);
  
  @if ($nth != default) {
    $o: map-merge($o, ('nth': $nth));
  }
  
  > li:nth-of-type(#{map-get($o, 'nth')}) {
    background-color: map-get($o, 'background-stripe');
  }
  
}

// Add List Hover
// Gives list hover styles for list items.
// @param $bg-hover
//   @type color
//   @default default ($lists('background-hover'))
// @param $options
//   @type map
//   @default $lists map
@mixin add-list-hover($bg-hover: default, $options: ()) {
  $o: map-merge($lists, $options);
  
  @if ($bg-hover != default) {
    $o: map-merge($o, ('background-hover': $bg-hover));
  }
  
  > li {
    @include transition(background-color 0.25s linear);
  }
  > li:hover {
    background-color: map-get($o, 'background-hover');
  }
  
}

/*==============================================================================
  @Lists - #{$filename}
==============================================================================*/

ul, ol {
  margin: 1rem 0 1rem 1.5rem;
  padding: 0;
  li {
    margin: 0.5rem 0;
  }
}

/**
 * Unordered Lists
 */
ul, ul ul ul ul {
  list-style: disc;
}
ul ul {
  list-style: circle;
}
ul ul ul {
  list-style: disc;
}

/**
 * Ordered Lists
 */
ol, ol ol ol ol {
  list-style: decimal;
}
ol ol {
  list-style: lower-alpha;
}
ol ol ol {
  list-style: lower-roman;
}

/**
 * Description Lists
 */
dl {
  margin: 1rem 0;
  dt {
    margin: 1rem 0 0;
    font-weight: bold;
    color: $color-dark;
  }
  dd {
    margin: 0 0 1rem 1rem;
  }
}

// Check if we should output modifier classes
@if (map-get($lists, 'classes') == true) {

/*==============================================================================
  @List Modifiers - #{$filename}
==============================================================================*/

/**
 * Base Table Styles
 */
.list {
  @include make-list();
}

/**
 * Border Modifiers
 */
.list.rowed {
  @include add-list-rowed();
  
  &.flush > li {
    padding-left: 0;
    padding-right: 0;
  }
}
.list.bordered {
  @include add-list-bordered();
}

/**
 * Miscellaneous Modifiers
 */
.list.rounded {
  @include add-list-rounded();
}
.list.striped {
  @include add-list-striped();
}
.list.hover {
  @include add-list-hover();
}

} // endif classes
